# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Radical.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, QStringListModel
import json
import numpy as np
import csv

from vectorTree import VectorTree
import utils
import radical_dict


class Ui_Radical_main(object):
    def __init__(self, json_file, radical_main):
        self.json_file = json_file
        self.radical_json = json.load(open(self.json_file, "rb"))
        self.word_hde = []
        self.radical_main = radical_main

    def setupUi(self):
        self.radical_main.setObjectName("Radical_main")
        self.radical_main.resize(684, 629)
        # 添加 logo
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icon/bu.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.radical_main.setWindowIcon(icon)

        # 设置格式
        self.gridLayout_2 = QtWidgets.QGridLayout(self.radical_main)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.VLayout = QtWidgets.QVBoxLayout()
        self.VLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.VLayout.setContentsMargins(9, 9, 9, 9)
        self.VLayout.setSpacing(6)
        self.VLayout.setObjectName("VLayout")
        self.wordVLayout = QtWidgets.QVBoxLayout()
        self.wordVLayout.setContentsMargins(20, 9, 20, 28)
        self.wordVLayout.setObjectName("wordVLayout")

        self.label_3 = QtWidgets.QLabel(self.radical_main)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setLineWidth(2)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.wordVLayout.addWidget(self.label_3)

        self.textEdit = QtWidgets.QLineEdit(self.radical_main)
        self.textEdit.setObjectName("textEdit")
        # 无功能, 但需要处理
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setSizeIncrement(QtCore.QSize(1, 0))
        self.textEdit.setBaseSize(QtCore.QSize(2, 0))
        font = QtGui.QFont()
        font.setWeight(50)
        font = QtGui.QFont()
        font.setFamily(font.defaultFamily())
        font.setPointSize(40)
        self.textEdit.setFont(font)
        val_limit = QtCore.QRegExp('^[\u4e00-\u9fa5]$')  # 只能输入汉字
        validator = QtGui.QRegExpValidator(val_limit)
        self.textEdit.setValidator(validator)
        self.textEdit.setMaxLength(1)
        self.textEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.wordVLayout.addWidget(self.textEdit)
        self.VLayout.addLayout(self.wordVLayout)

        self.BtnGroup = QtWidgets.QGroupBox(self.radical_main)
        self.BtnGroup.setObjectName("BtnGroup")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.BtnGroup)
        self.gridLayout_3.setContentsMargins(-1, 30, 14, 43)
        self.gridLayout_3.setHorizontalSpacing(31)
        self.gridLayout_3.setVerticalSpacing(6)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.hdeBtn = QtWidgets.QPushButton(self.BtnGroup)
        self.hdeBtn.setObjectName("hdeBtn")
        self.gridLayout_3.addWidget(self.hdeBtn, 0, 0, 1, 1)
        # 实现编码功能
        self.hdeBtn.clicked.connect(self.hde_function)

        self.saveBtn = QtWidgets.QPushButton(self.BtnGroup)
        self.saveBtn.setObjectName("saveBtn")
        self.gridLayout_3.addWidget(self.saveBtn, 0, 1, 1, 1)
        # 存储现有编码至存储文件
        self.saveBtn.clicked.connect(self.save_function)

        self.radicalBtn = QtWidgets.QPushButton(self.BtnGroup)
        self.radicalBtn.setObjectName("radicalBtn")
        self.gridLayout_3.addWidget(self.radicalBtn, 1, 0, 1, 1)
        # 实现自动编码字典
        self.radicalBtn.clicked.connect(self.radical_json_)

        self.word_hdeBtn = QtWidgets.QPushButton(self.BtnGroup)
        self.word_hdeBtn.setObjectName("word_hdeBtn")
        self.gridLayout_3.addWidget(self.word_hdeBtn, 1, 1, 1, 1)
        # 实现查看编码文件功能
        self.word_hdeBtn.clicked.connect(self.word_hde_file)

        self.gridLayout_3.setColumnStretch(0, 1)
        self.gridLayout_3.setColumnStretch(1, 1)
        self.gridLayout_3.setRowStretch(0, 1)
        self.gridLayout_3.setRowStretch(1, 1)
        self.VLayout.addWidget(self.BtnGroup)
        self.VLayout.setStretch(0, 1)
        self.VLayout.setStretch(1, 1)
        self.gridLayout_2.addLayout(self.VLayout, 0, 5, 1, 1)

        # 设置格式
        self.vectorBox = QtWidgets.QGroupBox(self.radical_main)
        self.vectorBox.setObjectName("vectorBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.vectorBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.label_2 = QtWidgets.QLabel(self.vectorBox)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)

        self.vectorTree = VectorTree(self.json_file, self.vectorBox)
        self.vectorTree.setObjectName("vectorTree")
        self.vectorTree.setColumnCount(2)
        self.vectorTree.setHeaderLabels(["node", "impact value"])
        self.vectorTree.header().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.verticalLayout_2.addWidget(self.vectorTree)
        # 树结构

        self.label = QtWidgets.QLabel(self.vectorBox)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)

        self.vectorTable = QtWidgets.QTableWidget(self.vectorBox)
        self.vectorTable.setObjectName("vectorTable")
        self.vectorTable.setColumnCount(3)
        self.vectorTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.vectorTable.setHorizontalHeaderLabels(['字符', '编码', '存储'])
        # self.vectorTable.setRowCount(0)
        self.verticalLayout_2.addWidget(self.vectorTable)

        self.gridLayout_2.addWidget(self.vectorBox, 0, 6, 1, 1)
        self.gridLayout_2.setColumnStretch(5, 1)
        self.gridLayout_2.setColumnStretch(6, 1)
        # 显示编码完成与否, 存储编码与否

        self.retranslateUi(self.radical_main)
        QtCore.QMetaObject.connectSlotsByName(self.radical_main)

    def retranslateUi(self, Radical_main):
        _translate = QtCore.QCoreApplication.translate
        Radical_main.setWindowTitle(_translate("Radical_main", "Radical"))
        self.label_3.setText(_translate("Radical_main", "编码字符"))
        self.BtnGroup.setTitle(_translate("Radical_main", "BtnGroup"))
        self.hdeBtn.setText(_translate("Radical_main", "编码"))
        self.saveBtn.setText(_translate("Radical_main", "save"))
        self.radicalBtn.setText(_translate("Radical_main", "部首json"))
        self.word_hdeBtn.setText(_translate("Radical_main", "编码文件"))
        self.vectorBox.setTitle(_translate("Radical_main", "VectorBox"))
        self.label_2.setText(_translate("Radical_main", "编码树"))
        self.label.setText(_translate("Radical_main", "字符编码状态"))

    def word_hde_file(self):
        # print("查看编码文件")
        QtWidgets.QMessageBox.about(self.radical_main, "提示", "文字编码文件为word_hde.csv")
        # 获取绝对路径
        doc_path = os.path.abspath(".")
        # print(doc_path)
        os.system("explorer.exe {}".format(doc_path))

    def radical_json_(self):
        # print("编码字典")
        items = ["查看并添加部首", "更新部首"]
        inDlg = QtWidgets.QInputDialog(self.radical_main)
        inDlg.setInputMode(0)
        inDlg.setComboBoxItems(items)
        inDlg.setComboBoxEditable(False)
        inDlg.setWindowTitle("设置节点表示")
        inDlg.setLabelText("节点表示")
        if inDlg.exec_():
            if inDlg.textValue() == items[0]:
                # 打开部首docx 所在的文件夹，方便用户利用word打开部首文件，添加部首
                QtWidgets.QMessageBox.about(self.radical_main, "提示", "使用word打开\n 部首文件(radical_num.docx),\n处理部首信息.")
                # 获取绝对路径
                doc_path = os.path.abspath(".")
                # print(doc_path)
                os.system("explorer.exe {}".format(doc_path))
            elif inDlg.textValue() == items[1]:
                # 在添加部首后，更新json
                radical_dict.radical_json()

                self.radical_json = json.load(open(self.json_file, "rb"))
                # print(len(self.radical_json))
                QtWidgets.QMessageBox.about(self.radical_main, "提示", "部首字典更新完成, 共{}个部首".format(len(self.radical_json)))

    def hde_function(self):
        # print("编码")
        item_iter = QtWidgets.QTreeWidgetItemIterator(self.vectorTree)
        vector_list = []
        while item_iter.value():
            item = item_iter.value()
            columnCount = item.columnCount()
            item_list = []
            for i in range(columnCount):
                item_list.append(item.text(i))
            vector_list.append(item_list)
            item_iter.__iadd__(1)

        self.word_hde.append([self.textEdit.text(), utils.calculate_word_hde(self.radical_json, vector_list)])
        utils.word_hde_finish(self.vectorTable, self.textEdit.text(), str(True))

        self.textEdit.clear()
        self.vectorTree.clear()

    # 由于之后还会整合, 只需要存储字符与编码
    def save_function(self):
        # print("存储")

        save_file = "./word_hde.csv"
        with open(save_file, "a", newline="") as f:
            hde_w = csv.writer(f, dialect='excel')
            for hde in self.word_hde:
                hde_list = [hde[0]]
                for v in hde[1].tolist():
                    hde_list.append(str(v))
                hde_w.writerow(hde_list)
                utils.word_save_finish(self.vectorTable, hde[0], str(True))
        self.word_hde = []

    # 最优先处理部首字典存在
    def radical_json_ok(self):
        if len(self.radical_json) <= 1:
            QtWidgets.QMessageBox.about(None, "警告", "请j即刻构建部首json文件！")


if __name__ == '__main__':
    import sys
    from PyQt5.QtWidgets import QApplication, QWidget
    from PyQt5.QtCore import QCoreApplication, pyqtSlot
    import Radical_ui_rc  # 导入添加的资源（根据实际情况填写文件名）

    json_file = "./radical_classes.json"

    app = QApplication(sys.argv)
    MainWindow = QWidget()
    ui = Ui_Radical_main(json_file, MainWindow)
    ui.setupUi()
    MainWindow.show()
    ui.radical_json_ok()
    sys.exit(app.exec_())
